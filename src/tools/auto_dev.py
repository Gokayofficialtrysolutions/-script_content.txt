import os
import subprocess
import shlex
from pathlib import Path

class AutoDev:
    def __init__(self, base_project_path="~/terminus_agi_projects"):
        self.base_project_path = Path(base_project_path).expanduser()
        self.base_project_path.mkdir(parents=True, exist_ok=True)

    def _run_command(self, command, cwd=None):
        try:
            # Use shlex.split for security with shell=False
            process = subprocess.Popen(shlex.split(command), cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            stdout, stderr = process.communicate(timeout=300) # 5-minute timeout
            if process.returncode != 0:
                return False, f"Error: {stderr}\nStdout: {stdout}"
            return True, stdout
        except subprocess.TimeoutExpired:
            return False, "Error: Command timed out after 5 minutes."
        except Exception as e:
            return False, f"An unexpected error occurred: {str(e)}"

    def create_project(self, name: str, project_type: str = "python_cli"):
        project_path = self.base_project_path / name
        if project_path.exists():
            return f"Project '{name}' already exists at {project_path}."

        try:
            project_path.mkdir(parents=True)
            readme_content = f"# {name}\n\nThis is a {project_type} project generated by AutoDev."
            with open(project_path / "README.md", "w") as f:
                f.write(readme_content)

            # Basic structure based on project type
            if project_type == "python_cli":
                (project_path / name).mkdir()
                with open(project_path / name / "__init__.py", "w") as f: f.write("")
                with open(project_path / name / "main.py", "w") as f:
                    f.write("def main():\n    print(\"Hello from main!\")\n\nif __name__ == \"__main__\":\n    main()\n")
                with open(project_path / "requirements.txt", "w") as f: f.write("# Add your dependencies here\n")
                with open(project_path / ".gitignore", "w") as f: f.write("__pycache__/\n*.pyc\n.env\nvenv/\n")
                # Initialize git repo
                success, msg = self._run_command("git init", cwd=str(project_path))
                if not success: print(f"Warning: Failed to init git repo: {msg}")

            elif project_type == "streamlit_dashboard":
                with open(project_path / "app.py", "w") as f:
                    f.write("import streamlit as st\n\nst.title(\"Streamlit Dashboard\")\nst.write(\"Welcome to your new dashboard!\")\n")
                with open(project_path / "requirements.txt", "w") as f: f.write("streamlit\n")
                with open(project_path / ".gitignore", "w") as f: f.write("__pycache__/\n*.pyc\n.env\nvenv/\n")
                success, msg = self._run_command("git init", cwd=str(project_path))
                if not success: print(f"Warning: Failed to init git repo: {msg}")

            elif project_type == "nodejs_api":
                (project_path / "src").mkdir()
                with open(project_path / "src" / "index.js", "w") as f:
                    f.write("const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`);\n});\n")
                with open(project_path / "package.json", "w") as f:
                    f.write(json.dumps({
                        "name": name, "version": "1.0.0", "description": "", "main": "src/index.js",
                        "scripts": {"start": "node src/index.js"}, "dependencies": {"express": "^4.17.1"} # Pinned for stability
                    }, indent=2))
                with open(project_path / ".gitignore", "w") as f: f.write("node_modules/\n.env\n")
                # Initialize git repo and install dependencies
                success, msg = self._run_command("git init", cwd=str(project_path))
                if not success: print(f"Warning: Failed to init git repo: {msg}")
                success_npm, msg_npm = self._run_command("npm install", cwd=str(project_path))
                if not success_npm: return f"Project '{name}' created, but failed to install npm dependencies: {msg_npm}"


            # Add more project types here (e.g., flask_api, react_frontend)

            return f"Project '{name}' of type '{project_type}' created successfully at {project_path}."

        except Exception as e:
            return f"Failed to create project '{name}': {str(e)}"

# This makes auto_dev an instance, so it can be imported directly
auto_dev = AutoDev()

if __name__ == '__main__':
    # Example Usage (for testing this script directly)
    # Note: This part is for direct execution testing, not typically called by the orchestrator.
    # The orchestrator will import the `auto_dev` instance.

    ad = AutoDev() # Create a new instance for testing if needed, or use the global one

    # Test Python CLI project
    # print(ad.create_project("my_python_cli_project", "python_cli"))

    # Test Streamlit Dashboard project
    # print(ad.create_project("my_streamlit_dashboard", "streamlit_dashboard"))

    # Test NodeJS API project
    # print(ad.create_project("my_nodejs_api_project", "nodejs_api"))

    # Example of how the orchestrator might call it (using the global instance)
    # if auto_dev:
    #    print(auto_dev.create_project("orchestrator_test_project", "python_cli"))
    pass
